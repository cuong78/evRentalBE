name: CI/CD Pipeline - EVRental Backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: evrental-backend
  JAVA_VERSION: '21'

jobs:
  # ==================== BUILD & TEST ====================
  build-and-test:
    name: 🔨 Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 🔧 Build with Maven
        run: mvn clean package -DskipTests

      - name: 🧪 Run tests
        run: mvn test
        continue-on-error: true

      - name: 📊 Test Summary
        if: always()
        run: |
          echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -d "target/surefire-reports" ]; then
            echo "✅ Tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No test reports found" >> $GITHUB_STEP_SUMMARY
          fi

  # ==================== BUILD & PUSH DOCKER IMAGE ====================
  docker-build-push:
    name: 🐳 Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 📝 Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            SPRING_PROFILES_ACTIVE=prod

      - name: ✅ Docker image built successfully
        run: |
          echo "### 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image pushed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY

  # ==================== DEPLOY TO SERVER ====================
  deploy-to-server:
    name: 🚀 Deploy to Production Server
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Copy docker-compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "docker-compose.yml,.env.example"
          target: "/opt/evrental"
          overwrite: true

      - name: 🚀 Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            
            echo "📂 Navigating to project directory..."
            cd /opt/evrental || exit 1
            
            echo "🔍 Checking for .env file..."
            if [ ! -f .env ]; then
              echo "⚠️  .env file not found, creating from example..."
              cp .env.example .env
              echo "⚠️  Please configure .env file manually!"
            fi
            
            echo "🐳 Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/evrental-backend:latest
            
            echo "🛑 Stopping old containers..."
            docker compose down || true
            
            echo "🚀 Starting new containers..."
            docker compose up -d
            
            echo "⏳ Waiting for containers to be ready..."
            sleep 10
            
            echo "📊 Container status:"
            docker compose ps
            
            echo "🧹 Cleaning up old images..."
            docker image prune -af || true
            
            echo "✅ Deployment completed successfully!"

      - name: 📝 Deployment Summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployed to: ${{ secrets.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "🐳 Image: ${{ secrets.DOCKER_HUB_USERNAME }}/evrental-backend:latest" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Time: $(date)" >> $GITHUB_STEP_SUMMARY

  # ==================== HEALTH CHECK ====================
  health-check:
    name: 🏥 Health Check
    needs: deploy-to-server
    runs-on: ubuntu-latest

    steps:
      - name: ⏳ Wait for service to start
        run: |
          echo "Waiting 30 seconds for services to initialize..."
          sleep 30

      - name: 🔍 Check application health
        run: |
          echo "### 🏥 Health Check Results" >> $GITHUB_STEP_SUMMARY
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8080/actuator/health || echo "000")
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Application is healthy!" >> $GITHUB_STEP_SUMMARY
            echo "📊 Status Code: $RESPONSE" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "⚠️ Health check returned: $RESPONSE" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️  This might be normal if server firewall blocks port 8080" >> $GITHUB_STEP_SUMMARY
            echo "💡 SSH into server and check: docker compose logs app" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: 📢 Final Status
        if: always()
        run: |
          echo "### 🎉 Deployment Pipeline Completed!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Check your application at: http://${{ secrets.SERVER_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
          echo "📝 To verify logs: \`ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'cd /opt/evrental && docker compose logs app'\`" >> $GITHUB_STEP_SUMMARY